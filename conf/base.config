 /* -------------------------------------------------
 *  Base Nextflow config file
 * -------------------------------------------------
 * This file contains basic process requirement setup. It DOES NOT
 * contain any config for cluster, so will run in default mode by
 * itself. It should be used with the max_memory, max_cpus and
 * max_time params for customising hardware limits
 */

process {

    cpus = 1
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }

    errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'terminate' }
    maxRetries = 3
    maxErrors = '-1'

    // Process-specific resource requirements
    withName:DECONT {
        container = 'lichenhao/shotgunmetagenomics-decont:v0.0.1'
        time = { check_max( 6.h * task.attempt, 'time') }
	cpus = { check_max(12, 'cpus') }
	memory = { check_max( 16.GB * task.attempt, 'memory') }
    }
    withName:KRAKEN2 {
        container = 'lichenhao/shotgunmetagenomics-kraken2:v2.0.8'
        time = { check_max( 4.h * task.attempt, 'time') }
	cpus = { check_max(4, 'cpus') }
    }
    withName:BRACKEN {
        container = 'lichenhao/shotgunmetagenomics-kraken2:v2.0.8'
        time = { check_max( 4.h * task.attempt, 'time') }
	cpus = 1
	memory = { check_max( 4.GB * task.attempt, 'memory') }
    }
    withName:METAPHLAN2 {
        container = 'quay.io/biocontainers/metaphlan2:2.7.7--py27h24bf2e0_4'
        time = { check_max( 4.h * task.attempt, 'time') }
	cpus = { check_max(8, 'cpus') }
	memory = { check_max( 10.GB  * task.attempt, 'memory') }	
    }
    withName:HUMANN2_INDEX {
	container = 'docker.io/lichenhao/shotgunmetagenomics-humann2_mini:v2.8.1'
        time = { check_max( 4.h * task.attempt, 'time') }
	cpus = 1
	memory = { check_max( 4.GB, 'memory') }	
    }
    withName:HUMANN2 {
        container = 'docker.io/lichenhao/shotgunmetagenomics-humann2_mini:v2.8.1'
        time = { check_max( 4.h * task.attempt, 'time') }
	cpus = { check_max(8, 'cpus') }
	memory = { check_max( 10.GB  * task.attempt, 'memory') }	
    }
    withName:"SPLIT_.*" {
    // TODO: this does not work for hybrid workflow
	container = 'ubuntu'
        time = { check_max( 1.h * task.attempt, 'time') }
	cpus = 1
	memory = { check_max( 2.GB * task.attempt, 'memory') }
    }
}

params {
    // Defaults only, expecting to be overwritten
    max_memory = 1024.GB
    max_cpus = 200
    max_time = 240.h
}
